{
  "openapi": "3.0.1",
  "info": {
    "title": "PTM SYSTEM Core",
    "description": "API for PTM SYSTEM Core Application",
    "version": "v1"
  },
  "paths": {
    "/api/Auth/login": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Login Method",
        "description": "Method to login in the system and shoot an email to the user to receieve OTP",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequestDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequestDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequestDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/ParkingLots/getallparkinglots": {
      "get": {
        "tags": [
          "ParkingLots"
        ],
        "summary": "Get All Parking Lots List",
        "description": "Get All Parking Lots List",
        "parameters": [
          {
            "name": "PageNumber",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/ParkingLots/addparkinglots": {
      "post": {
        "tags": [
          "ParkingLots"
        ],
        "summary": "Add  Parking Lots",
        "description": "Add  Parking Lots",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddParkinglotDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AddParkinglotDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AddParkinglotDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/ParkingLots/updateparkinglots": {
      "put": {
        "tags": [
          "ParkingLots"
        ],
        "summary": "Get All Parking Lots List",
        "description": "Get All Parking Lots List",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateParkinglotDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateParkinglotDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateParkinglotDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/Tickets/getallparking": {
      "get": {
        "tags": [
          "Tickets"
        ],
        "summary": "Get All Parking List Ticket",
        "description": "Get all parking list Ticket like in and out parking list",
        "parameters": [
          {
            "name": "PageNumber",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "IsPaid",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "TicketNumber",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "InTime",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "OutTime",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "LicensePlate",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OwnerName",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/Tickets/addnewbookingparking": {
      "post": {
        "tags": [
          "Tickets"
        ],
        "summary": "Add new booking ticket for customer ",
        "description": "Add new booking ticket for customer",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddTicketRequestDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AddTicketRequestDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AddTicketRequestDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/Tickets/updatebookingparking": {
      "post": {
        "tags": [
          "Tickets"
        ],
        "summary": "Update Existing booking ticket for customer ",
        "description": "Update Existing booking ticket for customer",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTicketRequestDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTicketRequestDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTicketRequestDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AddParkinglotDTO": {
        "type": "object",
        "properties": {
          "lotname": {
            "type": "string",
            "nullable": true
          },
          "location": {
            "type": "string",
            "nullable": true
          },
          "totalspaces": {
            "type": "integer",
            "format": "int32"
          },
          "availablespaces": {
            "type": "integer",
            "format": "int32"
          },
          "createddate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "userid": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AddTicketRequestDTO": {
        "required": [
          "categoryId",
          "fineAmount",
          "inTime",
          "licensePlate",
          "ownerName",
          "parkingLotId"
        ],
        "type": "object",
        "properties": {
          "ticketId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "parkingLotId": {
            "type": "integer",
            "format": "int32"
          },
          "userId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "issueDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "inTime": {
            "type": "string",
            "format": "date-time"
          },
          "outTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "expirationDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "fineAmount": {
            "type": "number",
            "format": "double"
          },
          "isPaid": {
            "type": "boolean",
            "nullable": true
          },
          "remarks": {
            "type": "string",
            "nullable": true
          },
          "discount": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "ticketNumber": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "licensePlate": {
            "minLength": 1,
            "type": "string"
          },
          "ownerName": {
            "minLength": 1,
            "type": "string"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "categoryId": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "LoginRequestDTO": {
        "type": "object",
        "properties": {
          "userName": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          },
          "secretKey": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpdateParkinglotDTO": {
        "type": "object",
        "properties": {
          "parkinglotid": {
            "type": "integer",
            "format": "int32"
          },
          "lotname": {
            "type": "string",
            "nullable": true
          },
          "location": {
            "type": "string",
            "nullable": true
          },
          "totalspaces": {
            "type": "integer",
            "format": "int32"
          },
          "availablespaces": {
            "type": "integer",
            "format": "int32"
          },
          "createddate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "userid": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpdateTicketRequestDTO": {
        "required": [
          "categoryId",
          "fineAmount",
          "licensePlate",
          "ownerName",
          "parkingLotId"
        ],
        "type": "object",
        "properties": {
          "ticketId": {
            "type": "integer",
            "format": "int32"
          },
          "parkingLotId": {
            "type": "integer",
            "format": "int32"
          },
          "userId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "issueDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "outTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "expirationDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "fineAmount": {
            "type": "number",
            "format": "double"
          },
          "isPaid": {
            "type": "boolean",
            "nullable": true
          },
          "remarks": {
            "type": "string",
            "nullable": true
          },
          "discount": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "licensePlate": {
            "minLength": 1,
            "type": "string"
          },
          "ownerName": {
            "minLength": 1,
            "type": "string"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "categoryId": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "http",
        "description": "Paste your JWT Bearer token on textbox below!",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  },
  "security": [
    {
      "Bearer": [ ]
    }
  ]
}